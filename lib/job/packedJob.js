"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fileJob_1 = require("./fileJob");
var folderJob_1 = require("./folderJob");
var tmp = require("tmp"), fs = require("fs"), path = require("path"), JSZip = require("jszip"), _ = require("lodash"), Reflect = require("reflect-metadata");
var PackedJob = (function (_super) {
    __extends(PackedJob, _super);
    function PackedJob(e, job) {
        // let job_name = job.getName();
        _super.call(this, e, job.getName());
        var pj = this;
        pj.e = e;
        pj.job = job;
    }
    /**
     *
     * @returns {Job}
     */
    PackedJob.prototype.getJob = function () {
        return this.job;
    };
    /**
     * Makes job ticket and returns the path to the temporary file.
     * @param job
     * @returns {string}
     */
    PackedJob.prototype.getJobTicket = function (job) {
        var pj = this;
        // Make job ticket
        var json = job.getJSON();
        var tmpobj = tmp.dirSync();
        var dir = tmpobj.name;
        var file_name = dir + path.sep + "ticket.json";
        try {
            fs.writeFileSync(file_name, json, "utf8");
        }
        catch (err) {
            pj.e.log(3, "Error writing job ticket to temporary file", pj);
        }
        return file_name;
    };
    PackedJob.prototype.buildZip = function (zip, callback) {
        // Save out zip
        var pj = this;
        var job = this.getJob();
        var tmpobj = tmp.dirSync();
        var dir = tmpobj.name;
        var file_name = job.getName() + ".antpack.zip";
        var file_path = dir + path.sep + file_name;
        zip
            .generateNodeStream({ type: "nodebuffer", streamFiles: true })
            .pipe(fs.createWriteStream(file_path))
            .on("finish", function () {
            // JSZip generates a readable stream with a "end" event,
            // but is piped here in a writable stream which emits a "finish" event.
            pj.setPath(file_path);
            pj.setName(file_name);
            callback();
        });
    };
    /**
     * Packs the related job on construction.
     */
    PackedJob.prototype.pack = function (done) {
        var pj = this;
        var job = pj.getJob();
        var ticketPath = pj.getJobTicket(job);
        var zip = new JSZip();
        // Add ticket to zip
        fs.readFile(ticketPath, function (err, data) {
            if (err)
                throw err;
            zip.file("_ticket/ticket.json", data);
            if (job.isFile()) {
                fs.readFile(job.getPath(), function (err, data) {
                    if (err)
                        throw err;
                    zip.file("_asset/" + job.getName(), data);
                    pj.buildZip(zip, function () {
                        done();
                    });
                });
            }
            else if (job.isFolder()) {
                job.getFiles().forEach(function (file) {
                    fs.readFile(file.getPath(), function (err, data) {
                        if (err)
                            throw err;
                        zip.file("_asset" + path.sep + job.getNameProper() + path.sep + file.getName(), data);
                        pj.buildZip(zip, function () {
                            done();
                        });
                    });
                });
            }
            else {
                pj.buildZip(zip, function () {
                    done();
                });
            }
        });
    };
    PackedJob.prototype.restoreJobTicket = function (jsonTicket) {
        var pj = this;
        var jobObject, job;
        try {
            jobObject = JSON.parse(jsonTicket);
            console.log("job type =>", jobObject.type, typeof jobObject);
            if (jobObject.type === "file") {
                job = new fileJob_1.FileJob(pj.e, jobObject.basename);
            }
            else if (jobObject.type === "folder") {
                job = new folderJob_1.FolderJob(pj.e, jobObject.basename);
            }
            else {
                pj.e.log(3, "Cannot unpack this type of job: " + jobObject.type, pj);
            }
        }
        catch (err) {
            pj.e.log(3, "Unpack ticket parse error: " + err + ".", pj);
        }
        // Restore property values
        job.setPropertyValues(jobObject.properties);
        // Restore lifecycle
        job.setLifeCycle(jobObject.lifeCycle);
        return job;
    };
    PackedJob.prototype.unpack = function (done) {
        // console.log("unpacking");
        var pj = this;
        var job = pj.getJob();
        // Read the zip to a buffer
        fs.readFile(job.getPath(), function (err, data) {
            if (err) {
                pj.e.log(3, "Unpacking readFile error: " + err, pj);
            }
            // Open the zip in JSZip
            JSZip.loadAsync(data).then(function (zip) {
                // Restore job ticket and create job
                zip.folder("_ticket").forEach(function (relativePath, file) {
                    zip.file("_ticket" + path.sep + relativePath).async("string")
                        .then(function (content) {
                        // Restore old job ticket
                        job = pj.restoreJobTicket(content);
                        var tmpobj = tmp.dirSync();
                        var tempPath = tmpobj.name;
                        if (zip.folder("_asset").length > 1) {
                            pj.e.log(2, "Restored job did not contain any file assets.", pj, [job]);
                        }
                        zip.folder("_asset").forEach(function (relativePath, file) {
                            // console.log("iterating over", relativePath);
                            zip.file("_asset" + path.sep + relativePath).async("nodebuffer")
                                .then(function (content) {
                                var filePath = tempPath + path.sep + relativePath;
                                fs.writeFileSync(filePath, content);
                                if (job.isFolder()) {
                                    console.log("gotta add file to job for folder");
                                }
                                else {
                                    job.setPath(filePath);
                                    job.rename(relativePath);
                                }
                                done(job);
                            });
                        });
                    });
                    // let readFile = fs.readFileSync(file.asNodeBuffer());
                    // console.log("readFile", readFile);
                });
                //
                // zip.folder("_asset").forEach(function (relativePath, file){
                //     console.log("iterating over", relativePath);
                // });
            });
        });
    };
    return PackedJob;
}(fileJob_1.FileJob));
exports.PackedJob = PackedJob;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
